.:Analyzing Networks & Network Traffic:.

Recall Wireshark/tcpdump lab
    Network traffic consists of:
        headers for each protocol 
        data
        footers for each protocol (mostly error detecting checksums)

    Traffic was given for the most part
         generated by programs
             accessing a web server
             logging into Sleipnir
             etc.

    Mostly a client-server model, but there is also a peer-to-peer model
        Peer-to-peer model:
            peers act as both server & client

    Most programs based on socket API
        Server:
            bind, listen, connect
              |_____________|
                      ^_
        Client:  connect|

        Both:
            send, receive, close

    Can use network scanners and portmappers to investigate LISTEN connection
    Use Wireshark/tcpdump to analyze ESTABLISHED connections

    Netstat Connections:
        LISTEN          waiting server
        ESTABLISHED     ongoing connection

    Lab tomorrow will look at tools that can query
        all of the LISTENing servers

    How Nmap Works
        Generates requests for all addresses & ports in given range
            Can send SYN/ACK/FULL requests, look at nmap manpage for refresher
        Can get error messages if firewall is not set up correctly
            Set firewall to block requests and hide server
        
        Port Scanning/Mapping
            Fingerprinting looks for variation in response from scanned machine
            Indicates specific TCP/IP stack code
            Look into making specially crafted packets to generate more
                refined responses from Nmap
   
    Network-based Vulnerability Scanners
        enhances port scanning fingerprinting concepts
        now looks for evidence of vulnerable servers
            response banners often have server name & version
            look in database for specially crafted requests &
                see if reply matches "vulnerable" / "not vulnerable"
                    states recorded in database
                many requests can be disruptive and/or destructive
                most scanners will mark these scans

*Free-ware version of Nessus may have time lag on vulnerabilities being added 
     
    Uses in digital forensics context:
        See what vulnerabilities (known) are present to give
            clues as to how an exploit may have occurred
            may only be useful for less-skilled hackers
        More often used as a preventative measure:
            run by network admins on regular basis

    Tenable Nessus
        free version comes with limited ruleset
        Subscriptions to rule feeds vary in cost
        Rules are documented on website
            rules are documented on website
                anyone can write new rules following rule API
        Originally open source w/ Linux rule server &
            various CLI & GUI clients

There are also host-based vulnerability scanners that use the 
    network to send reports to centralized hub 
    - "host agents"

    Need host-based agents for live packet monitoring
    Look for more info on layered defense model

Snort
    Network/host IDS/IPS
    Signature database is a set of rules files
        Ex: alert tcp any > any 80 (msg: "Web"; flags:s;sid:9999999;)
        Complex rules can run a script in response to regex patterns
        Inside parentheses: 'flags' is where regex patterns can be set
        Must have sid, must be >= 1,000,000 for user created rules
        Understands various rules from CVE, BugTrack, Nessus, etc.

    Setting up Snort can be a headache
        Default rule set is HUGE & can generate a lot of background noise

    Lookup Barnyard binary string reporting system
    Pre-processors are often poorly documented & hard to configure

    Adding simple rules is not too tough
        Learning rule syntax can be tough
        Debugging messages can be cryptic

    What it can do for prevention & response
        Response: 
            provide another audit trail of known bad network activity
        Prevention:
            provide early alerts about multi-stage attacks
            used in-line, can drop known bad packets 
            otherwise, can reset connections when bad data seen
            other responses also possible
            *Make sure to continually check logs and set up automatic responses
            
Correlating Activity
    Don't look at packet in isolation
    Look at streams of packet groups and alerts to better determine activity
        alerts -> attack scenario
            Researchers have been working on automating this for 10+ years
        packets -> connection/session log
            tcptrace & tcpflow in book
            Wireshark also has ability to reconstruct tcp sessions
        sessions -> attack scenario
            Honeypots and Honeynets 
            Onion-routing and Tor hide the traffic/session information

    Most of these tools used in corporate environments
    Some intelligence agencies and other government offices employ them too
    
     
